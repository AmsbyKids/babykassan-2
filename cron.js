
const cron = require('node-cron');
const { collectNewInformation, updateAssistant } = require('./automaticLearning');
const { runTests } = require('./aliceTests');
const fs = require('fs');

// Funktion f√∂r att logga h√§ndelser
function logEvent(message) {
  const timestamp = new Date().toISOString();
  const logEntry = `${timestamp} - ${message}\n`;
  
  // Logga till konsol
  console.log(logEntry);
  
  // Spara till loggfil
  fs.appendFile('learning_cron.log', logEntry, (err) => {
    if (err) console.error('Kunde inte skriva till loggfil:', err);
  });
}

// Schemal√§gg automatisk inl√§rning vid specifika tider med olika intensitet
logEvent('üöÄ CRON-JOBB INITIERAS');

// Daglig inl√§rning - k√∂r varje morgon kl 05:00
cron.schedule('0 5 * * *', async () => {
  logEvent('üìö STARTAR DAGLIG INL√ÑRNING');
  try {
    const result = await collectNewInformation();
    logEvent(`üìä DAGLIG INL√ÑRNING SLUTF√ñRD: ${result.success ? 'Lyckades' : 'Misslyckades'} - ${result.message}`);
    
    // K√∂r tester efter inl√§rning f√∂r att kontrollera kvalitet
    logEvent('üß™ STARTAR AUTOMATISKA TESTER EFTER INL√ÑRNING');
    const testResults = await runTests();
    logEvent(`üìã TESTRESULTAT: Svarsriktighet ${(testResults.answerAccuracy.overallPassRate * 100).toFixed(1)}%`);
  } catch (error) {
    logEvent(`‚ùå FEL VID DAGLIG INL√ÑRNING: ${error.message}`);
  }
});

// Extra inl√§rning - k√∂r varje m√•ndag, onsdag och fredag kl 14:00
cron.schedule('0 14 * * 1,3,5', async () => {
  logEvent('üìö STARTAR EXTRA INL√ÑRNING (FLERA DAGAR I VECKAN)');
  try {
    const result = await collectNewInformation();
    logEvent(`üìä EXTRA INL√ÑRNING SLUTF√ñRD: ${result.success ? 'Lyckades' : 'Misslyckades'} - ${result.message}`);
  } catch (error) {
    logEvent(`‚ùå FEL VID EXTRA INL√ÑRNING: ${error.message}`);
  }
});

// Specialinl√§rning - k√∂r f√∂rsta dagen i varje m√•nad f√∂r djupare genomg√•ng
cron.schedule('0 3 1 * *', async () => {
  logEvent('üîç STARTAR M√ÖNADSVIS DJUPINL√ÑRNING');
  try {
    // Uppdatera assistenten med nya instruktioner efter inl√§rning
    await updateAssistant();
    logEvent('‚úÖ ASSISTENTEN UPPDATERAD MED NY INFORMATION');
    
    // K√∂r tester efter uppdatering
    const testResults = await runTests();
    
    // Spara detaljerad testrapport f√∂r m√•nadsgenoms√∂kning
    fs.writeFileSync(`test_results_monthly_${new Date().toISOString().split('T')[0]}.json`, 
                    JSON.stringify(testResults, null, 2));
    
    logEvent(`üìã M√ÖNADSVIS TEST SLUTF√ñRT: Svarsriktighet ${(testResults.answerAccuracy.overallPassRate * 100).toFixed(1)}%`);
  } catch (error) {
    logEvent(`‚ùå FEL VID M√ÖNADSVIS INL√ÑRNING: ${error.message}`);
  }
});

// √ñvervakningsfunktion - kontrollera att inl√§rning sker regelbundet
cron.schedule('0 8 * * *', () => {
  try {
    // Kontrollera n√§r senaste inl√§rningen skedde
    if (fs.existsSync('official_data.json')) {
      const officialData = JSON.parse(fs.readFileSync('official_data.json', 'utf8'));
      const lastUpdate = new Date(officialData.senast_uppdaterad || 0);
      const now = new Date();
      const daysSinceUpdate = Math.floor((now - lastUpdate) / (1000 * 60 * 60 * 24));
      
      if (daysSinceUpdate > 2) {
        logEvent(`‚ö†Ô∏è VARNING: Inl√§rning har inte skett p√• ${daysSinceUpdate} dagar!`);
      } else {
        logEvent(`‚úÖ √ñVERVAKNINGSKONTROLL: Senaste inl√§rning skedde f√∂r ${daysSinceUpdate} dagar sedan.`);
      }
    } else {
      logEvent('‚ö†Ô∏è VARNING: official_data.json finns inte. Inl√§rning har aldrig k√∂rts!');
    }
  } catch (error) {
    logEvent(`‚ùå FEL VID √ñVERVAKNINGSKONTROLL: ${error.message}`);
  }
});

// Starta manuellt vid uppstart f√∂r att s√§kerst√§lla att data finns
(async () => {
  // V√§nta 30 sekunder f√∂r att s√§kerst√§lla att systemet har startats helt
  await new Promise(resolve => setTimeout(resolve, 30000));
  
  logEvent('üöÄ INITIAL INL√ÑRNING VID SERVERSTART');
  
  // Kontrollera om officiell data redan finns
  let needsInitialData = true;
  try {
    if (fs.existsSync('official_data.json')) {
      const officialData = JSON.parse(fs.readFileSync('official_data.json', 'utf8'));
      if (officialData.nya_regler_2025 && officialData.nya_regler_2025.length > 100) {
        needsInitialData = false;
        logEvent('‚ÑπÔ∏è Officiell data existerar redan, hoppar √∂ver initial inl√§rning');
      }
    }
  } catch (err) {
    logEvent(`‚ö†Ô∏è Kunde inte l√§sa official_data.json: ${err.message}`);
  }
  
  if (needsInitialData) {
    try {
      const result = await collectNewInformation();
      logEvent(`üìä INITIAL INL√ÑRNING SLUTF√ñRD: ${result.success ? 'Lyckades' : 'Misslyckades'} - ${result.message}`);
    } catch (error) {
      logEvent(`‚ùå FEL VID INITIAL INL√ÑRNING: ${error.message}`);
    }
  }
  
  // K√∂r tester oavsett om initial inl√§rning skedde eller inte
  try {
    logEvent('üß™ STARTAR INITIAL TESTK√ñRNING');
    const testResults = await runTests();
    logEvent(`üìã INITIAL TESTRESULTAT: Svarsriktighet ${(testResults.answerAccuracy.overallPassRate * 100).toFixed(1)}%`);
  } catch (error) {
    logEvent(`‚ùå FEL VID INITIAL TESTK√ñRNING: ${error.message}`);
  }
})();

logEvent('‚úÖ CRON-JOBB SCHEMALAGDA OCH STARTADE');
console.log('Cron-schema etablerat! Se learning_cron.log f√∂r aktivitetslogg.');

module.exports = {
  // Exportera funktioner f√∂r manuell k√∂rning
  startManualLearning: collectNewInformation,
  runManualTests: runTests
};
