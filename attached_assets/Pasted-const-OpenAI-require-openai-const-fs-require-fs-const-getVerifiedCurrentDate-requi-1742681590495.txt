const OpenAI = require("openai");
const fs = require("fs");
const { getVerifiedCurrentDate } = require("./swedishDateCalculator");

let openai;
let assistant;

async function setupOpenAI() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.error("‚ö†Ô∏è OPENAI_API_KEY saknas i milj√∂variabler!");
      process.exit(1);
    }

    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const { createAssistant } = require("./openai.service");
    assistant = await createAssistant(openai);

    console.log(`‚úÖ OpenAI konfigurerad med assistent: ${assistant.id}`);
    return true;
  } catch (error) {
    console.error("‚ùå Fel vid konfigurering av OpenAI:", error);
    return false;
  }
}

async function queryOpenAI(query, contextInfo = '') {
  try {
    if (!openai || !assistant) {
      const success = await setupOpenAI();
      if (!success) {
        return { success: false, answer: "Kunde inte ansluta till AI-tj√§nsten." };
      }
    }

    const verifiedDateData = getVerifiedCurrentDate();

    // Blockera "8 mars"
    if (
      verifiedDateData.fullDate.includes("8 mars") ||
      verifiedDateData.date.endsWith("-03-08")
    ) {
      return {
        success: false,
        answer: "Datumfel: '8 mars' √§r ett f√∂rbjudet datum. Systemet har stoppat beg√§ran."
      };
    }

    const fullDate = verifiedDateData.fullDate;
    const isoDate = verifiedDateData.iso;
    const timestamp = verifiedDateData.timestamp;
    const weekday = verifiedDateData.weekday;

    // Skapa en thread f√∂r denna konversation
    const thread = await openai.beta.threads.create();

    // Skicka ren text till assistenten
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: `
ANV√ÑNDARENS FR√ÖGA:
${query}

üìÖ DAGENS VERIFIERADE DATUM:
- Fullt datum: ${fullDate}
- Veckodag: ${weekday}
- ISO: ${isoDate}
- Timestamp: ${timestamp}

üìå VIKTIGA DIREKTIV:
- B√∂rja svaret med: "Idag den ${fullDate} kan jag..."
- Anv√§nd INTE "8 mars" i n√•gon form
- Alltid ge exakta datumf√∂rslag och ber√§kna SGI-ers√§ttning
- Svara lugnt, harmoniskt och konkret
- Avsluta med f√∂ljdfr√•gor
      `
    });

    // K√∂r en run
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id,
    });

    // V√§nta p√• att run:en slutf√∂rs
    let completedRun;
    const maxRetries = 30;
    let retries = 0;

    while (retries < maxRetries) {
      const runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      if (runStatus.status === "completed") {
        completedRun = runStatus;
        break;
      } else if (runStatus.status === "failed" || runStatus.status === "cancelled") {
        return {
          success: false,
          answer: "Tyv√§rr uppstod ett fel vid bearbetning av din fr√•ga. V√§nligen f√∂rs√∂k igen."
        };
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
      retries++;
    }

    if (!completedRun) {
      return {
        success: false,
        answer: "Tyv√§rr tog bearbetningen av din fr√•ga f√∂r l√•ng tid. V√§nligen f√∂rs√∂k igen."
      };
    }

    // H√§mta alla meddelanden fr√•n tr√•den
    const messages = await openai.beta.threads.messages.list(thread.id);
    const assistantMessages = messages.data.filter(msg => msg.role === "assistant");

    if (assistantMessages.length === 0) {
      return {
        success: false,
        answer: "Tyv√§rr genererades inget svar p√• din fr√•ga. V√§nligen f√∂rs√∂k igen."
      };
    }

    const latestMessage = assistantMessages[0];
    const textContent = latestMessage.content
      .filter(content => content.type === "text")
      .map(content => content.text.value)
      .join("\n");

    if (!textContent) {
      return {
        success: false,
        answer: "Tyv√§rr kunde inget svar genereras. V√§nligen f√∂rs√∂k igen."
      };
    }

    return {
      success: true,
      answer: textContent
    };

  } catch (error) {
    console.error("‚ùå Fel vid anrop till OpenAI:", error);
    return {
      success: false,
      answer: "Ett fel uppstod vid kommunikation med AI-tj√§nsten. V√§nligen f√∂rs√∂k igen senare."
    };
  }
}

module.exports = { queryOpenAI };
