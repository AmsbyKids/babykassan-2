HELA queryOpenAI() ‚Äì stabil och Replit-v√§nlig
js
Kopiera
Redigera
const OpenAI = require("openai");
const fs = require("fs");

let openai;
let assistant;

// S√§tt upp OpenAI och skapa eller √•teranv√§nd assistent
async function setupOpenAI() {
  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ö†Ô∏è OPENAI_API_KEY saknas i milj√∂variabler!");
    process.exit(1);
  }

  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  const { loadOrCreateAssistant } = require("./openai.service");
  assistant = await loadOrCreateAssistant(openai);

  console.log(`‚úÖ OpenAI konfigurerad med assistent: ${assistant.id}`);
  return true;
}

// Anropa OpenAI med fr√•ga och kontext
async function queryOpenAI(query, contextInfo = '') {
  try {
    if (!openai || !assistant) {
      const success = await setupOpenAI();
      if (!success) return { success: false, answer: "Kunde inte ansluta till AI-tj√§nsten." };
    }

    const { getVerifiedCurrentDate } = require('./swedishDateCalculator');
    const verifiedDateData = getVerifiedCurrentDate();

    const systemDate = new Date();
    const monthNames = ['januari', 'februari', 'mars', 'april', 'maj', 'juni',
                        'juli', 'augusti', 'september', 'oktober', 'november', 'december'];
    const weekdayNames = ['s√∂ndag', 'm√•ndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'l√∂rdag'];

    const humanReadableDate = `${systemDate.getDate()} ${monthNames[systemDate.getMonth()]} ${systemDate.getFullYear()}`;
    const weekday = weekdayNames[systemDate.getDay()];
    const isoDate = systemDate.toISOString().split('T')[0];

    // Datumblock (kritisk logik, men som ren text)
    const criticalDateBlock = `
=== ALICES DATUMKONFIGURATION ===

‚úÖ DAGENS DATUM: ${humanReadableDate} (${weekday})
‚úÖ ISO: ${isoDate}
‚õî "8 mars" √§r f√∂rbjudet i alla former

üìå ALLA SVAR M√ÖSTE B√ñRJA MED:
"Idag den ${humanReadableDate} kan jag..."

üìå MAX SGI 2025: 588 000 kr
üìå ERS√ÑTTNING: SGI √∑ 365 √ó 0,8 (max 1250 kr/dag)
üìå NETTO: Brutto √ó 0,68 (ca 32% skatt)

=== SLUT P√Ö DATUMBLOCK ===
`;

    // Kombinera allt i en anv√§ndarstr√§ng
    const userMessage = `
ANV√ÑNDARENS FR√ÖGA:
${query}

${criticalDateBlock}

ANV√ÑNDARKONTEXT:
${contextInfo}
`;

    // Skapa en ny tr√•d
    const thread = await openai.beta.threads.create();

    // L√§gg till meddelande i tr√•den
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: userMessage
    });

    // Starta k√∂rning
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id,
    });

    // V√§nta p√• att k√∂rningen √§r klar (max 30 sekunder)
    let retries = 0;
    let completedRun = null;

    while (retries < 30) {
      const runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      if (runStatus.status === "completed") {
        completedRun = runStatus;
        break;
      } else if (["failed", "cancelled"].includes(runStatus.status)) {
        return { success: false, answer: "Ett fel uppstod vid bearbetning. F√∂rs√∂k igen." };
      }

      await new Promise(resolve => setTimeout(resolve, 1000));
      retries++;
    }

    if (!completedRun) {
      return { success: false, answer: "Tidsgr√§ns n√•dd. F√∂rs√∂k igen om en stund." };
    }

    // H√§mta assistentens svar
    const messages = await openai.beta.threads.messages.list(thread.id);
    const assistantMessages = messages.data.filter(m => m.role === "assistant");

    if (assistantMessages.length === 0) {
      return { success: false, answer: "Inget svar kunde genereras. F√∂rs√∂k igen." };
    }

    const latestMessage = assistantMessages[0];
    const textContent = latestMessage.content
      .filter(c => c.type === "text")
      .map(c => c.text.value)
      .join("\n");

    return {
      success: true,
      answer: textContent || "Tyv√§rr kunde inget svar genereras."
    };

  } catch (error) {
    console.error("‚ùå Fel vid anrop till OpenAI:", error);
    return { success: false, answer: "N√•got gick fel. F√∂rs√∂k igen senare." };
  }
}

module.exports = { queryOpenAI };