// âœ… Backend-endpoint fÃ¶r att spara och returnera mÃ¥nad-fÃ¶r-mÃ¥nad-plan
import express from 'express';
import { createClient } from '@supabase/supabase-js';
import { calculatePlanOptions, generateMonthByMonthPlan } from './planCalculator.js';

const router = express.Router();

// Supabase-klient
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

// POST /api/plan - skapar och sparar en plan
router.post('/api/plan', async (req, res) => {
  const {
    userId,
    sessionId,
    plan_start,
    plan_slut,
    dagar_per_vecka,
    sgi,
    kommun,
    full_plan_text,
    json_plan,
    netto_per_manad,
    brutto_per_manad,
    kvarvarande_dagar
  } = req.body;

  if (!userId && !sessionId) {
    return res.status(400).json({ error: 'userId eller sessionId krÃ¤vs.' });
  }

  const { data, error } = await supabase.from('plans').insert([
    {
      user_id: userId || null,
      session_id: sessionId || null,
      plan_start,
      plan_slut,
      dagar_per_vecka,
      sgi,
      kommun,
      full_plan_text,
      json_plan,
      netto_per_manad,
      brutto_per_manad,
      kvarvarande_dagar
    }
  ]);

  if (error) {
    console.error('Fel vid sparning:', error);
    return res.status(500).json({ error: error.message });
  }

  res.status(200).json({ message: 'Planen har sparats', data });
});

// GET /api/plan/auto - generera en personlig plan automatiskt
router.get('/api/plan/auto', (req, res) => {
  const sgi = parseInt(req.query.sgi);
  const kommun = req.query.kommun || 'Stockholm';
  const dagarKvar = parseInt(req.query.dagarKvar) || 480;
  const minNetto = parseInt(req.query.minNetto) || 12000;
  const maxManader = parseInt(req.query.maxManader) || 14;
  const startAr = parseInt(req.query.startAr) || 2025;
  const startManad = parseInt(req.query.startManad) || 7; // juli

  if (!sgi || !kommun) {
    return res.status(400).json({ error: 'FÃ¶r att kunna rÃ¤kna behÃ¶ver jag bÃ¥de SGI och kommun.' });
  }

  // Skattetabell kan i framtiden hÃ¤mtas dynamiskt per kommun
  const skatt = {
    'Stockholm': 0.32,
    'GÃ¶teborg': 0.3111,
    'MalmÃ¶': 0.3242,
    'UmeÃ¥': 0.33
  };

  const kommunSkatt = skatt[kommun] || 0.32;

  const dagersattning = ((sgi * 12) / 365) * 0.97 * 0.8;
  const alternativ = calculatePlanOptions({ sgi, kommunSkatt, maxManader, minNetto, dagarKvar });

  if (alternativ.length === 0) {
    return res.status(404).json({ message: 'Inget alternativ uppfyller kraven.' });
  }

  const forsta = alternativ[0];
  const plan = generateMonthByMonthPlan({
    startManad,
    startAr,
    dagarPerVecka: forsta.dagarPerVecka,
    antalManader: maxManader,
    dagersattning,
    kommunSkatt
  });

  const text = `HÃ¤r Ã¤r ett fÃ¶rslag:\n- ${forsta.dagarPerVecka} dagar/vecka\n- Brutto: ${forsta.bruttoPerManad} kr/mÃ¥n\n- Netto: ${forsta.nettoPerManad} kr/mÃ¥n\n- Kvarvarande dagar efter perioden: ${forsta.kvarvarandeDagar}\n\nğŸ“… MÃ¥nad fÃ¶r mÃ¥nad:\n` + plan.map(p => `â€¢ ${p.manad} â€“ ${p.dagar} dagar â€“ ${p.netto} kr netto`).join('\n') + '\n\nVill du att jag visar fler alternativ ocksÃ¥?';

  res.json({
    plan_start: `${startManad} ${startAr}`,
    plan_slut: `${startManad + maxManader - 1 > 12 ? 'mÃ¥nad okÃ¤nd' : startManad + maxManader - 1} ${startAr + Math.floor((startManad + maxManader - 1)/12)}`,
    dagar_per_vecka: forsta.dagarPerVecka,
    sgi,
    kommun,
    full_plan_text: text,
    json_plan: plan,
    netto_per_manad: forsta.nettoPerManad,
    brutto_per_manad: forsta.bruttoPerManad,
    kvarvarande_dagar: forsta.kvarvarandeDagar
  });
});

export default router;
