
const axios = require('axios');
const fs = require('fs');
const OpenAI = require('openai');
const { isRelevantQuestion } = require('./openai.service');

// Testscenarier f√∂r Alice
const testScenarios = [
  {
    category: "Grundl√§ggande f√∂rst√•else",
    questions: [
      {
        question: "Hur m√•nga f√∂r√§ldradagar f√•r man totalt per barn?",
        expectedInfo: ["480", "totalt", "dagar"]
      },
      {
        question: "N√§r kan man tidigast ta ut f√∂r√§ldrapenning?",
        expectedInfo: ["60", "dagar", "innan", "ber√§knad"]
      }
    ]
  },
  {
    category: "SGI-skydd",
    questions: [
      {
        question: "Hur skyddar jag min SGI under f√∂r√§ldraledigheten?",
        expectedInfo: ["SGI-skydd", "f√∂r√§ldraledighet"]
      },
      {
        question: "M√•ste jag ta ut 5 dagar i veckan f√∂r att skydda min SGI?",
        expectedInfo: ["nej", "inte n√∂dv√§ndigt", "f√∂r√§ldraledighet"] 
      }
    ]
  },
  {
    category: "2025-regler",
    questions: [
      {
        question: "Vad h√§nder med f√∂r√§ldrapenning p√• sjukpenningniv√• f√∂r arbetsfria dagar fr√•n april 2025?",
        expectedInfo: ["april 2025", "arbetsfria", "dagar"]
      },
      {
        question: "√Ñndras reglerna f√∂r dubbeldagar i april 2025?",
        expectedInfo: ["dubbeldagar", "2025"]
      }
    ]
  },
  {
    category: "Felaktiga p√•st√•enden",
    questions: [
      {
        question: "St√§mmer det att man kan ta ut f√∂r√§ldrapenning p√• sjukpenningniv√• f√∂r arbetsfria dagar utan att ta ut n√•gon mer dag fr√•n april 2025?",
        expectedInfo: ["felaktigt", "nej", "m√•ste ta ut", "arbetsdagar"]
      },
      {
        question: "M√•ste jag ta ut 5 hela f√∂r√§ldrapenningdagar per vecka f√∂r att skydda min SGI?",
        expectedInfo: ["felaktigt", "nej", "beh√∂ver inte", "5 dagar"]
      }
    ]
  },
  {
    category: "Irrelevanta fr√•gor",
    questions: [
      {
        question: "Vad tycker du om fotboll?",
        irrelevantExpected: true
      },
      {
        question: "Ber√§tta om Stockholms historia",
        irrelevantExpected: true
      }
    ]
  }
];

// Evalueringsfunktion f√∂r testresultat
function evaluateResponse(response, testCase) {
  if (testCase.irrelevantExpected) {
    // Kontrollera att Alice identifierade fr√•gan som irrelevant
    return {
      passed: response.toLowerCase().includes("specialiserad p√• f√∂r√§ldrapenning") && 
              response.toLowerCase().includes("hj√§lpa till med fr√•gor inom detta omr√•de"),
      reason: testCase.irrelevantExpected ? "F√∂rv√§ntade irrelevant svar" : "F√∂rv√§ntade relevant svar",
      relevantIdentificationCorrect: response.toLowerCase().includes("specialiserad p√• f√∂r√§ldrapenning")
    };
  } else {
    // Kontrollera att svar inneh√•ller f√∂rv√§ntad information
    const allExpectedInfoPresent = testCase.expectedInfo.every(info => 
      response.toLowerCase().includes(info.toLowerCase())
    );
    
    return {
      passed: allExpectedInfoPresent,
      reason: allExpectedInfoPresent ? "Alla f√∂rv√§ntade nyckelord hittades" : "Saknar f√∂rv√§ntade nyckelord",
      missingKeywords: testCase.expectedInfo.filter(info => 
        !response.toLowerCase().includes(info.toLowerCase())
      )
    };
  }
}

// Testa relevansdetekteringsfunktionen
function testRelevanceDetection() {
  console.log("\nüîç TESTAR RELEVANSDETEKTERING");
  
  const relevantQuestions = [
    "N√§r kan jag ta ut f√∂r√§ldrapenning?",
    "Hur mycket f√∂r√§ldrapenning f√•r jag?",
    "Vad h√§nder med min SGI under f√∂r√§ldraledighet?",
    "Hur l√§nge kan jag vara hemma med mitt barn?",
    "Jag funderar p√• reglerna kring f√∂r√§ldradagar och barnets √•lder"
  ];
  
  const irrelevantQuestions = [
    "Vad √§r svaret p√• livets g√•ta?",
    "Ber√§tta om historien bakom Stockholm",
    "Hur lagar man k√∂ttbullar?",
    "Vilken √§r din favoritfilm?",
    "Hur blir v√§dret imorgon?"
  ];
  
  let relevantPassed = 0;
  let irrelevantPassed = 0;
  
  console.log("\n‚úÖ RELEVANTA FR√ÖGOR:");
  relevantQuestions.forEach(q => {
    const result = isRelevantQuestion(q);
    console.log(`  ${result ? '‚úì' : '‚úó'} "${q}"`);
    if (result) relevantPassed++;
  });
  
  console.log("\n‚ùå IRRELEVANTA FR√ÖGOR:");
  irrelevantQuestions.forEach(q => {
    const result = isRelevantQuestion(q);
    console.log(`  ${!result ? '‚úì' : '‚úó'} "${q}"`);
    if (!result) irrelevantPassed++;
  });
  
  console.log(`\nResultat: ${relevantPassed}/5 relevanta identifierade, ${irrelevantPassed}/5 irrelevanta identifierade`);
  return {
    relevantDetectionRate: relevantPassed / relevantQuestions.length,
    irrelevantDetectionRate: irrelevantPassed / irrelevantQuestions.length
  };
}

// Direkt test med OpenAI utan att g√• via servern
async function testWithOpenAI() {
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  console.log("\nüß† TESTAR DIREKTA OPENAI-SVAR");
  
  // L√§s officiell data
  let officialData = {};
  try {
    if (fs.existsSync('official_data.json')) {
      officialData = JSON.parse(fs.readFileSync('official_data.json', 'utf8'));
    }
  } catch (err) {
    console.error('Kunde inte l√§sa official_data.json:', err);
    return { success: false, error: 'Kunde inte l√§sa datak√§lla' };
  }
  
  // Skapa kunskapsbas
  const rules2025 = officialData.nya_regler_2025 || 'Information om 2025 √§r inte tillg√§nglig √§nnu.';
  
  let testResults = [];
  let totalPassed = 0;
  
  // Testa en kategori i taget
  for (const category of testScenarios) {
    console.log(`\nüìã Kategori: ${category.category}`);
    
    const categoryResults = [];
    
    for (const testCase of category.questions) {
      console.log(`   Testar: "${testCase.question}"`);
      
      try {
        // F√∂rbered prompt med samma struktur som anv√§nds i aiQueryService
        const promptText = `
ANV√ÑNDARENS FR√ÖGA: 
${testCase.question}

KUNSKAPSBAS OM F√ñR√ÑLDRAPENNING 2025:
${rules2025}

DETALJERADE INSTRUKTIONER:
1. Besvara anv√§ndarens fr√•ga baserat ENDAST p√• informationen i kunskapsbasen ovan.
2. Om informationen saknas i kunskapsbasen, var √§rlig och s√§g att du inte har denna information.
3. Var EXTRA NOGGRANN med att inte sprida felaktig information om f√∂r√§ldrapenning 2025.
4. Strukturera svaret tydligt med rubriker och punktlistor f√∂r b√§ttre l√§sbarhet.
5. Ange alltid k√§lla och datum f√∂r informationen.
`;
        
        // Anropa OpenAI API
        const response = await openai.chat.completions.create({
          model: 'gpt-4o',
          messages: [
            {
              role: 'system',
              content: 'Du √§r en expert p√• svensk f√∂r√§ldrapenning 2025 och ger bara korrekt information baserad p√• verifierade officiella k√§llor.'
            },
            {
              role: 'user',
              content: promptText
            }
          ],
          temperature: 0.3,
          max_tokens: 500
        });
        
        const answer = response.choices[0].message.content;
        
        // Evaluera resultatet
        const evaluation = evaluateResponse(answer, testCase);
        
        // Formatera resultatet f√∂r utskrift
        const resultSymbol = evaluation.passed ? '‚úÖ' : '‚ùå';
        console.log(`   ${resultSymbol} Resultat: ${evaluation.passed ? 'GODK√ÑNT' : 'UNDERK√ÑNT'} - ${evaluation.reason}`);
        
        if (!evaluation.passed && evaluation.missingKeywords) {
          console.log(`   ‚ÑπÔ∏è Saknade nyckelord: ${evaluation.missingKeywords.join(', ')}`);
        }
        
        if (evaluation.passed) {
          totalPassed++;
        }
        
        // Spara resultatet
        categoryResults.push({
          question: testCase.question,
          passed: evaluation.passed,
          reason: evaluation.reason,
          answer: answer.substring(0, 100) + '...' // Spara bara b√∂rjan av svaret f√∂r l√§sbarhet
        });
        
      } catch (error) {
        console.error(`   ‚ùå ERROR: ${error.message}`);
        categoryResults.push({
          question: testCase.question,
          passed: false,
          reason: `Fel: ${error.message}`,
          answer: null
        });
      }
    }
    
    testResults.push({
      category: category.category,
      results: categoryResults,
      passRate: categoryResults.filter(r => r.passed).length / categoryResults.length
    });
  }
  
  // Ber√§kna √∂vergripande resultat
  const totalQuestions = testScenarios.reduce((sum, category) => sum + category.questions.length, 0);
  const overallPassRate = totalPassed / totalQuestions;
  
  // Skriv resultatet till fil
  const testReport = {
    timestamp: new Date().toISOString(),
    overallPassRate,
    totalQuestions,
    totalPassed,
    categoryResults: testResults
  };
  
  fs.writeFileSync('test_results.json', JSON.stringify(testReport, null, 2));
  
  console.log(`\nüìä TESTRESULTAT: ${totalPassed}/${totalQuestions} tester godk√§nda (${(overallPassRate * 100).toFixed(1)}%)`);
  testResults.forEach(category => {
    console.log(`   ${category.category}: ${(category.passRate * 100).toFixed(1)}% godk√§nda`);
  });
  
  return testReport;
}

// Huvudfunktion f√∂r att k√∂ra tester
async function runTests() {
  console.log("üß™ STARTAR TESTER AV ALICE");
  console.log("================================");
  
  // Testa relevansdetektering
  const relevanceResults = testRelevanceDetection();
  
  // Testa svar direkt med OpenAI
  const openaiResults = await testWithOpenAI();
  
  // Sammanst√§ll resultat
  const finalResults = {
    timestamp: new Date().toISOString(),
    relevanceDetection: relevanceResults,
    answerAccuracy: {
      overallPassRate: openaiResults.overallPassRate,
      totalPassed: openaiResults.totalPassed,
      totalQuestions: openaiResults.totalQuestions
    }
  };
  
  // Skriv slutrapport
  console.log("\nüìù SAMMANST√ÑLLNING");
  console.log("================================");
  console.log(`Testdatum: ${new Date().toLocaleString('sv-SE')}`);
  console.log(`Relevansdetektering: ${(relevanceResults.relevantDetectionRate * 100).toFixed(1)}% / ${(relevanceResults.irrelevantDetectionRate * 100).toFixed(1)}%`);
  console.log(`Svarsriktighet: ${(openaiResults.overallPassRate * 100).toFixed(1)}%`);
  
  if (openaiResults.overallPassRate >= 0.8) {
    console.log("\n‚úÖ SLUTSATS: Alice √§r redo f√∂r marknadsf√∂ring med goda resultat.");
  } else if (openaiResults.overallPassRate >= 0.6) {
    console.log("\n‚ö†Ô∏è SLUTSATS: Alice presterar acceptabelt men beh√∂ver f√∂rb√§ttringar innan full lansering.");
  } else {
    console.log("\n‚ùå SLUTSATS: Alice beh√∂ver betydande f√∂rb√§ttringar innan lansering.");
  }
  
  return finalResults;
}

// Exportera testfunktioner
module.exports = {
  runTests,
  testRelevanceDetection,
  testWithOpenAI
};

// Om filen k√∂rs direkt, starta tester
if (require.main === module) {
  runTests().catch(err => {
    console.error("‚ùå Fel vid testning:", err);
  });
}
/**
 * Testskript f√∂r att verifiera korrekta ber√§kningar av f√∂r√§ldrapenning
 */

function testSGICalculations() {
  console.log("=== TEST AV SGI-BER√ÑKNINGAR ===");
  
  // Test 1: SGI under taket
  const sgi1 = 450000;
  const dailyAmount1 = sgi1 / 365 * 0.8;
  console.log(`Test 1: SGI ${sgi1} kr ger dagers√§ttning ${Math.round(dailyAmount1)} kr (under taket 1 250 kr)`);
  
  // Test 2: SGI vid taket (r√§kna fram v√§rdet)
  const maxDaily = 1250;
  const sgiAtCap = Math.round((maxDaily * 365) / 0.8);
  console.log(`Test 2: SGI-v√§rdet som ger maxbeloppet (1 250 kr) √§r ${sgiAtCap} kr`);
  
  // Test 3: SGI √∂ver taket
  const sgi3 = 600000;
  const dailyRaw3 = sgi3 / 365 * 0.8;
  const dailyCapped3 = Math.min(dailyRaw3, maxDaily);
  console.log(`Test 3: SGI ${sgi3} kr ger okapad dagers√§ttning ${Math.round(dailyRaw3)} kr`);
  console.log(`        Efter kapad till taket: ${Math.round(dailyCapped3)} kr`);
}

function testDayCalculations() {
  console.log("\n=== TEST AV DAGSBER√ÑKNINGAR ===");
  
  // Test 1: Omvandla m√•nader till dagar (5 dagar/vecka)
  const months1 = 5;
  const daysPerWeek1 = 5;
  const days1 = months1 * 4.33 * daysPerWeek1;
  console.log(`Test 1: ${months1} m√•nader med ${daysPerWeek1} dagar/vecka ger ${Math.round(days1)} dagar`);
  
  // Test 2: Omvandla m√•nader till dagar (3 dagar/vecka)
  const months2 = 8;
  const daysPerWeek2 = 3;
  const days2 = months2 * 4.33 * daysPerWeek2;
  console.log(`Test 2: ${months2} m√•nader med ${daysPerWeek2} dagar/vecka ger ${Math.round(days2)} dagar`);
  
  // Test 3: Omvandla m√•nader till dagar (7 dagar/vecka)
  const months3 = 6;
  const daysPerWeek3 = 7;
  const days3 = months3 * 4.33 * daysPerWeek3;
  console.log(`Test 3: ${months3} m√•nader med ${daysPerWeek3} dagar/vecka ger ${Math.round(days3)} dagar`);
}

function testTotalCompensationCalculations() {
  console.log("\n=== TEST AV TOTAL ERS√ÑTTNING ===");
  
  // Test med SGI under taket
  const sgi1 = 450000;
  const dailyAmount1 = sgi1 / 365 * 0.8;
  const days1 = 5 * 4.33 * 5; // 5 m√•nader, 5 dagar/vecka
  const total1 = dailyAmount1 * Math.round(days1);
  console.log(`Test 1: SGI ${sgi1} kr, ${Math.round(days1)} dagar, ger total ers√§ttning ${Math.round(total1)} kr`);
  
  // Test med SGI √∂ver taket
  const sgi2 = 600000;
  const dailyRaw2 = sgi2 / 365 * 0.8;
  const dailyCapped2 = Math.min(dailyRaw2, 1250);
  const days2 = 8 * 4.33 * 3; // 8 m√•nader, 3 dagar/vecka
  const total2 = dailyCapped2 * Math.round(days2);
  console.log(`Test 2: SGI ${sgi2} kr, ${Math.round(days2)} dagar, ger total ers√§ttning ${Math.round(total2)} kr`);
}

// K√∂r alla tester
testSGICalculations();
testDayCalculations();
testTotalCompensationCalculations();
