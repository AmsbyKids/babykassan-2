
const fs = require('fs');
const axios = require('axios');
const cheerio = require('cheerio');
const { createAssistant } = require('./openai.service');
const OpenAI = require('openai');

// Initiera OpenAI-klienten
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Lista √∂ver betrodda k√§llor
const trustedSources = [
  {
    name: 'F√∂rs√§kringskassan - F√∂r√§ldrapenning',
    url: 'https://www.forsakringskassan.se/privatperson/foralder/foraldrapenning',
    selectors: 'article, .content-area, main, p, h1, h2, h3, li',
    priority: 'high'
  },
  {
    name: 'F√∂rs√§kringskassan - Nya regler 2025',
    url: 'https://www.forsakringskassan.se/nyhetsarkiv', 
    selectors: 'article, .content-area, .news-list, .news-item, h2, h3, p',
    priority: 'high'
  },
  {
    name: 'F√∂rs√§kringskassan - N√§r barnet √§r f√∂tt',
    url: 'https://www.forsakringskassan.se/privatperson/foralder/nar-barnet-ar-fott/foraldrapenning',
    selectors: 'article, .content-area, main, p, h1, h2, h3, li',
    priority: 'medium'
  },
  {
    name: 'Riksdagen - Propositioner',
    url: 'https://www.riksdagen.se/sv/dokument-lagar/dokument/proposition/',
    selectors: '.searchResultContainer, .documentList, h3, p',
    priority: 'high',
    searchTerm: 'f√∂r√§ldrapenning 2025'
  },
  {
    name: 'Regeringen - Rattsliga dokument',
    url: 'https://www.regeringen.se/rattsliga-dokument/',
    selectors: '.content-list, .news-list, h2, h3, p',
    priority: 'high',
    searchTerm: 'f√∂r√§ldrapenning'
  },
  {
    name: 'F√∂rs√§kringskassan - Prisbasbelopp',
    url: 'https://www.forsakringskassan.se/privatperson/ersattningar-och-bidrag/prisbasbelopp',
    selectors: '.article-content, main, p, table, tr, td',
    priority: 'medium'
  },
  {
    name: 'Almega - Arbetsgivarinformation',
    url: 'https://www.almega.se/aktuellt-och-press/',
    selectors: 'article, .news-item, .post, h2, h3, p',
    priority: 'medium',
    searchTerm: 'f√∂r√§ldrapenning rapportering'
  },
  {
    name: 'Unionen - F√∂r√§ldraskap',
    url: 'https://www.unionen.se/rad-och-stod/foraldraskap',
    selectors: 'article, .content, p, h2, h3, li',
    priority: 'low'
  },
  {
    name: 'SCB - Statistik',
    url: 'https://www.scb.se/hitta-statistik/',
    selectors: '.content-area, article, p, h2, h3',
    priority: 'low',
    searchTerm: 'f√∂r√§ldrapenning'
  },
  {
    name: 'Sveriges Riksdag - Nya Lagar',
    url: 'https://www.riksdagen.se/sv/dokument-lagar/dokument/svensk-forfattningssamling/',
    selectors: '.searchResultContainer, .hit-item, h3, p',
    priority: 'high',
    searchTerm: 'f√∂r√§ldrapenning'
  }
];

// Nyckelord f√∂r filtrering
const relevantKeywords = [
  'f√∂r√§ldrapenning', 'f√∂r√§ldraledighet', 'nya regler', 'proposition', 
  '2025', '2026', 'april', 'f√∂r√§ndring', 'sgi skydd', 'sjukpenninggrundande', 
  'barnbidrag', 'dagers√§ttning', 'f√∂r√§ldradagar', 'reserverade'
];

/**
 * H√§mtar och sparar information fr√•n alla betrodda k√§llor
 */
async function collectNewInformation() {
  console.log(`üîÑ Startar automatisk inl√§rning ${new Date().toISOString()}`);
  
  // L√§s in tidigare data
  let officialData = {};
  try {
    if (fs.existsSync('official_data.json')) {
      officialData = JSON.parse(fs.readFileSync('official_data.json', 'utf8'));
    }
  } catch (err) {
    console.error('Kunde inte l√§sa official_data.json:', err);
    // Om filen inte existerar, skapa en tom struktur
    officialData = {
      "prisbasbelopp": "58 800 kr",
      "inkomstbasbelopp": "80 600 kr",
      "sjukpenninggrundande_inkomst": {
        "max": "588 000 kr",
        "min": "14 100 kr"
      },
      "senast_uppdaterad": new Date().toISOString(),
      "k√§lla": "Initierad vid f√∂rsta inl√§rningen",
      "nya_regler_2025": "F√∂r√§ldrapenningregler f√∂r 2025 laddas in...",
      "automatically_collected": {}
    };
  }
  
  // Skapa en inl√§rningslogg
  let learningLog = [];
  try {
    if (fs.existsSync('learning_log.json')) {
      learningLog = JSON.parse(fs.readFileSync('learning_log.json', 'utf8'));
    }
  } catch (err) {
    console.error('Kunde inte l√§sa learning_log.json:', err);
    learningLog = [];
  }
  
  // Samla information fr√•n alla k√§llor
  let newInformation = '';
  let latestUpdateDate = new Date().toISOString();
  
  // H√•ll reda p√• bes√∂kta URLs f√∂r att undvika dubletter
  const visitedUrls = new Set();
  // Lista √∂ver uppt√§ckta men ej bes√∂kta relaterade l√§nkar
  let discoveredLinks = [];
  
  // Sorterar k√§llor baserat p√• prioritet
  const prioritySources = [...trustedSources].sort((a, b) => {
    const priorityOrder = { high: 0, medium: 1, low: 2 };
    return priorityOrder[a.priority || 'medium'] - priorityOrder[b.priority || 'medium'];
  });
  
  for (const source of prioritySources) {
    try {
      // Undvik dubletter
      if (visitedUrls.has(source.url)) {
        continue;
      }
      
      console.log(`üîç S√∂ker information fr√•n ${source.name}: ${source.url} (Prioritet: ${source.priority || 'medium'})`);
      
      // Om k√§llan har en s√∂kterm, anv√§nd den f√∂r att hitta mer specifik information
      let targetUrl = source.url;
      if (source.searchTerm) {
        console.log(`üîé Anv√§nder s√∂kterm: "${source.searchTerm}"`);
        // Simulera s√∂kning om URL:en √§r en s√∂kbar sida
        if (source.url.includes('riksdagen.se') || source.url.includes('regeringen.se')) {
          targetUrl = `${source.url}?q=${encodeURIComponent(source.searchTerm)}`;
        }
      }
      
      const response = await axios.get(targetUrl);
      const $ = cheerio.load(response.data);
      visitedUrls.add(targetUrl);
      
      // Extrahera relevant inneh√•ll baserat p√• sidans struktur
      let pageContent = '';
      $(source.selectors).each((_, el) => {
        pageContent += $(el).text() + ' ';
      });
      
      // Hitta relaterade l√§nkar f√∂r ytterligare s√∂kning
      $('a').each((_, el) => {
        const href = $(el).attr('href');
        const linkText = $(el).text().toLowerCase();
        
        // Om l√§nken verkar relevant baserat p√• text och destination
        if (href && 
            !visitedUrls.has(href) && 
            !discoveredLinks.includes(href) && 
            (relevantKeywords.some(keyword => linkText.includes(keyword.toLowerCase())) || 
             (linkText.includes('l√§s mer') || linkText.includes('mer information')))) {
            
            // Hantera b√•de absoluta och relativa l√§nkar
            let fullUrl = href;
            if (href.startsWith('/')) {
              // Konvertera relativ URL till absolut
              const baseUrl = new URL(targetUrl);
              fullUrl = `${baseUrl.protocol}//${baseUrl.host}${href}`;
            }
            
            // Kontrollera att l√§nken √§r till en betrodd dom√§n
            const trustedDomains = [
              'forsakringskassan.se', 
              'riksdagen.se', 
              'regeringen.se', 
              'skatteverket.se',
              'almega.se',
              'unionen.se',
              'scb.se'
            ];
            
            if (trustedDomains.some(domain => fullUrl.includes(domain))) {
              discoveredLinks.push(fullUrl);
              console.log(`üîó Hittade relaterad l√§nk: ${fullUrl}`);
            }
        }
      });
      
      // Filtrera inneh√•ll baserat p√• nyckelord
      const relevantContent = extractRelevantContent(pageContent, relevantKeywords);
      if (relevantContent) {
        newInformation += `\n\n--- INFORMATION FR√ÖN ${source.name.toUpperCase()} ---\n${relevantContent}`;
        console.log(`‚úÖ Hittade relevant information fr√•n ${source.name} (${relevantContent.length} tecken)`);
        
        // L√§gg till i l√§rningsloggen
        learningLog.push({
          timestamp: new Date().toISOString(),
          source: source.name,
          url: targetUrl,
          priority: source.priority || 'medium',
          content_length: relevantContent.length,
          content_summary: relevantContent.substring(0, 150) + '...'
        });
      } else {
        console.log(`‚ÑπÔ∏è Ingen relevant information hittades fr√•n ${source.name}`);
      }
    } catch (error) {
      console.error(`‚ùå Fel vid h√§mtning fr√•n ${source.name}:`, error.message);
    }
  }
  
  // Bes√∂k upp till 5 av de uppt√§ckta relaterade l√§nkarna
  const maxExtraLinks = 5;
  console.log(`üîç Unders√∂ker upp till ${maxExtraLinks} relaterade l√§nkar...`);
  
  for (let i = 0; i < Math.min(discoveredLinks.length, maxExtraLinks); i++) {
    const url = discoveredLinks[i];
    
    try {
      // Undvik dubletter
      if (visitedUrls.has(url)) {
        continue;
      }
      
      console.log(`üîç S√∂ker information fr√•n relaterad l√§nk: ${url}`);
      const response = await axios.get(url);
      const $ = cheerio.load(response.data);
      visitedUrls.add(url);
      
      // Extrahera relevant inneh√•ll
      let pageContent = '';
      $('article, .content-area, main, p, h1, h2, h3, li, .news-item').each((_, el) => {
        pageContent += $(el).text() + ' ';
      });
      
      // Filtrera inneh√•ll baserat p√• nyckelord
      const relevantContent = extractRelevantContent(pageContent, relevantKeywords);
      if (relevantContent) {
        newInformation += `\n\n--- INFORMATION FR√ÖN RELATERAD K√ÑLLA: ${url} ---\n${relevantContent}`;
        console.log(`‚úÖ Hittade relevant information fr√•n relaterad l√§nk (${relevantContent.length} tecken)`);
        
        // L√§gg till i l√§rningsloggen
        learningLog.push({
          timestamp: new Date().toISOString(),
          source: 'Relaterad k√§lla',
          url: url,
          priority: 'medium',
          content_length: relevantContent.length,
          content_summary: relevantContent.substring(0, 150) + '...'
        });
      } else {
        console.log(`‚ÑπÔ∏è Ingen relevant information hittades fr√•n relaterad l√§nk: ${url}`);
      }
    } catch (error) {
      console.error(`‚ùå Fel vid h√§mtning fr√•n relaterad l√§nk ${url}:`, error.message);
    }
  }
  
  // Om vi hittat ny information, analysera den med OpenAI
  if (newInformation.length > 100) {
    console.log('üß† Analyserar ny information med OpenAI...');
    
    try {
      const analysisResponse = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Du √§r en AI-expert p√• att analysera information om f√∂r√§ldrapenning i Sverige. Extrahera all relevant information om nya regler, √§ndringar, belopp och datum. Var s√§rskilt uppm√§rksam p√• information r√∂rande 2025 och fram√•t. Strukturera informationen tydligt med rubriker och punktlistor.'
          },
          {
            role: 'user',
            content: `Analysera f√∂ljande information om f√∂r√§ldrapenning och extrahera alla viktiga fakta, s√§rskilt g√§llande nya regler fr√•n april 2025:\n\n${newInformation}`
          }
        ],
        temperature: 0.5,
        max_tokens: 1000
      });
      
      const analysisResult = analysisResponse.choices[0].message.content;
      console.log('‚úÖ Analys slutf√∂rd');
      
      // Uppdatera officiell data
      if (!officialData.automatically_collected) {
        officialData.automatically_collected = {};
      }
      
      // Spara analysresultat
      officialData.automatically_collected[latestUpdateDate] = {
        raw_information: newInformation,
        analysis: analysisResult
      };
      
      // Uppdatera senaste regler f√∂r 2025 om analysen inneh√•ller relevant information
      if (analysisResult.toLowerCase().includes('2025') || 
          analysisResult.toLowerCase().includes('april') || 
          analysisResult.toLowerCase().includes('nya regler')) {
        
        // Verifiera informationen med en extra OpenAI-f√∂rfr√•gan f√∂r att s√§kerst√§lla kvaliteten
        try {
          console.log('üß† Verifierar information med extra OpenAI-f√∂rfr√•gan...');
          
          const verificationResponse = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
              {
                role: 'system',
                content: 'Du √§r en faktagranskare som specialiserar sig p√• svensk f√∂r√§ldrapenning och regler fr√•n F√∂rs√§kringskassan. Din uppgift √§r att STRIKT granska information och flagga eventuella p√•st√•enden som saknar bekr√§ftad k√§lla. Det √§r kritiskt att vi inte sprider felaktig information om f√∂r√§ldrapenning 2025.'
              },
              {
                role: 'user',
                content: `VIKTIGT: Granska f√∂ljande information om f√∂r√§ldrapenning 2025 EXTREMT NOGA. 

FELAKTIGA p√•st√•enden som INTE f√•r f√∂rekomma:
1. Att man kan ta ut f√∂r√§ldrapenning p√• sjukpenningniv√• f√∂r arbetsfria dagar utan att ta ut n√•gon mer dag (detta √§r FELAKTIGT)
2. Att man m√•ste ta ut 5 hela f√∂r√§ldrapenningdagar per vecka f√∂r att skydda SGI (detta √§r FELAKTIGT)

Granska f√∂ljande information: ${analysisResult}`
              }
            ],
            temperature: 0.3,
            max_tokens: 800
          });
          
          const verificationResult = verificationResponse.choices[0].message.content;
          console.log('‚úÖ Verifiering slutf√∂rd');
          
          // Om verifieringen indikerar att informationen √§r korrekt
          if (verificationResult.toLowerCase().includes('korrekt') || 
              verificationResult.toLowerCase().includes('verifierad') ||
              verificationResult.toLowerCase().includes('st√§mmer')) {
            
            // L√§gg till den nya informationen till befintlig information
            if (officialData.nya_regler_2025) {
              officialData.nya_regler_2025 = analysisResult + '\n\n--- TIDIGARE INFORMATION ---\n' + officialData.nya_regler_2025.split('--- SENASTE AUTOMATISKA UPPDATERINGEN ---')[0];
            } else {
              officialData.nya_regler_2025 = analysisResult;
            }
            
            console.log('‚úÖ Uppdaterade information om 2025-regler (verifierad)');
          } else {
            // Om verifieringen p√•pekade viktiga korrigeringar, anv√§nd den korrigerade informationen
            if (officialData.nya_regler_2025) {
              officialData.nya_regler_2025 = verificationResult + '\n\n--- TIDIGARE INFORMATION ---\n' + officialData.nya_regler_2025.split('--- SENASTE AUTOMATISKA UPPDATERINGEN ---')[0];
            } else {
              officialData.nya_regler_2025 = verificationResult;
            }
            
            console.log('‚úÖ Uppdaterade information om 2025-regler (korrigerad)');
          }
          
          // Spara √§ven verifieringen
          if (!officialData.verifications) {
            officialData.verifications = [];
          }
          
          officialData.verifications.push({
            timestamp: new Date().toISOString(),
            original: analysisResult.substring(0, 200) + '...',
            verification: verificationResult.substring(0, 200) + '...'
          });
          
        } catch (error) {
          console.error('‚ùå Fel vid verifiering:', error.message);
          
          // Fallback om verifieringen misslyckas
          if (officialData.nya_regler_2025) {
            officialData.nya_regler_2025 += '\n\n--- SENASTE AUTOMATISKA UPPDATERINGEN ---\n' + analysisResult;
          } else {
            officialData.nya_regler_2025 = analysisResult;
          }
          
          console.log('‚úÖ Uppdaterade information om 2025-regler (ej verifierad)');
        }
      }
      
      // Uppdatera senaste uppdateringen
      officialData.senast_uppdaterad = latestUpdateDate;
      officialData.k√§lla = 'Automatiskt insamlad fr√•n betrodda k√§llor: ' + trustedSources.map(s => s.name).join(', ');
      
      // Spara uppdaterad data
      fs.writeFileSync('official_data.json', JSON.stringify(officialData, null, 2));
      fs.writeFileSync('learning_log.json', JSON.stringify(learningLog, null, 2));
      
      console.log('‚úÖ Sparade uppdaterad information till official_data.json');
      console.log('‚úÖ Sparade inl√§rningslogg till learning_log.json');
      
      // Uppdatera assistenten med ny information
      await updateAssistant();
      
      return {
        success: true,
        message: 'Automatisk inl√§rning slutf√∂rd. Hittade och analyserade ny information.',
        sources_checked: trustedSources.length,
        new_information_length: newInformation.length,
        analysis_length: analysisResult.length
      };
    } catch (error) {
      console.error('‚ùå Fel vid analys med OpenAI:', error.message);
      return {
        success: false,
        message: 'Fel vid analys med OpenAI: ' + error.message
      };
    }
  } else {
    console.log('‚ÑπÔ∏è Inte tillr√§ckligt med ny information hittades f√∂r analys');
    
    // Spara uppdaterad inl√§rningslogg √§nd√•
    fs.writeFileSync('learning_log.json', JSON.stringify(learningLog, null, 2));
    
    return {
      success: true,
      message: 'Automatisk inl√§rning slutf√∂rd. Ingen tillr√§cklig ny information hittades.',
      sources_checked: trustedSources.length
    };
  }
}

/**
 * Extraherar relevant inneh√•ll baserat p√• nyckelord med viktat relevanssystem
 */
function extractRelevantContent(text, keywords) {
  // Dela upp texten i meningar
  const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 10);
  
  // Skapa ett relevanssystem f√∂r meningar
  const scoredSentences = sentences.map(sentence => {
    const lowerSentence = sentence.toLowerCase();
    let score = 0;
    
    // Ber√§kna po√§ng baserat p√• antal nyckelord och deras betydelse
    const highPriorityKeywords = ['2025', 'april 2025', '1 april 2025', 'nya regler', 'rapporteringsskyldighet'];
    const mediumPriorityKeywords = ['f√∂r√§ldrapenning', 'f√∂r√§ldradagar', 'reserverade', 'sgi skydd', 'proposition'];
    
    // Ge h√∂gre po√§ng f√∂r h√∂gprioriterade nyckelord
    highPriorityKeywords.forEach(keyword => {
      if (lowerSentence.includes(keyword.toLowerCase())) {
        score += 3;
      }
    });
    
    // Ge medium po√§ng f√∂r mediumprioriterade nyckelord
    mediumPriorityKeywords.forEach(keyword => {
      if (lowerSentence.includes(keyword.toLowerCase())) {
        score += 2;
      }
    });
    
    // Ge baspo√§ng f√∂r alla andra nyckelord
    keywords.forEach(keyword => {
      if (!highPriorityKeywords.includes(keyword) && !mediumPriorityKeywords.includes(keyword) && 
          lowerSentence.includes(keyword.toLowerCase())) {
        score += 1;
      }
    });
    
    // Ge extra po√§ng f√∂r meningar som inneh√•ller datum eller sifferuppgifter
    if (/\d{4}/.test(lowerSentence) || /\d+\s*(kr|kronor|procent|%)/.test(lowerSentence)) {
      score += 2;
    }
    
    // Ge extra po√§ng f√∂r meningar som ser ut att inneh√•lla √§ndringar eller nya regler
    if (lowerSentence.includes('√§ndras') || 
        lowerSentence.includes('√§ndring') || 
        lowerSentence.includes('tr√§der i kraft') || 
        lowerSentence.includes('g√§ller fr√•n')) {
      score += 2;
    }
    
    return { sentence, score };
  });
  
  // Sortera meningar efter relevans och ta de mest relevanta
  const sortedSentences = scoredSentences
    .filter(item => item.score > 0)  // Filtrera bort irrelevanta meningar
    .sort((a, b) => b.score - a.score); // Sortera efter po√§ng (h√∂gst f√∂rst)
  
  // Om det finns tillr√§ckligt m√•nga relevanta meningar, sammanst√§ll dem
  if (sortedSentences.length > 0) {
    // Gruppera meningar f√∂r att beh√•lla kontext
    // Vi vill ha de mest relevanta men ocks√• beh√•lla ordning i k√§lltexten
    let contextGroups = [];
    let currentGroup = [];
    
    // Skapa en indexerad kopia av den ursprungliga meningsordningen
    const originalSentencesMap = sentences.reduce((map, sentence, index) => {
      map[sentence] = index;
      return map;
    }, {});
    
    // Sortera de relevanta meningarna efter deras ursprungliga ordning
    const orderedSentences = [...sortedSentences]
      .sort((a, b) => originalSentencesMap[a.sentence] - originalSentencesMap[b.sentence]);
    
    // Bilda sammanh√§ngande grupper av meningar f√∂r b√§ttre kontext
    orderedSentences.forEach((item, index) => {
      if (index > 0) {
        const prevIndex = originalSentencesMap[orderedSentences[index-1].sentence];
        const currIndex = originalSentencesMap[item.sentence];
        
        // Om meningarna √§r i sekvens (med ett visst avst√•nd), l√§gg till i samma grupp
        if (currIndex - prevIndex <= 3) {
          currentGroup.push(item);
        } else {
          // Annars, starta en ny grupp
          if (currentGroup.length > 0) {
            contextGroups.push([...currentGroup]);
          }
          currentGroup = [item];
        }
      } else {
        currentGroup.push(item);
      }
    });
    
    // L√§gg till den sista gruppen
    if (currentGroup.length > 0) {
      contextGroups.push(currentGroup);
    }
    
    // Sammanst√§ll all information, grupperad efter kontext
    const result = contextGroups
      .map(group => group.map(item => item.sentence.trim() + '.').join(' '))
      .join('\n\n');
    
    return result;
  }
  
  return null;
}

/**
 * Uppdaterar assistenten med nya instruktioner
 */
async function updateAssistant() {
  try {
    console.log('üîÑ Uppdaterar assistenten med ny inl√§rd information...');
    await createAssistant(openai);
    console.log('‚úÖ Assistenten uppdaterad');
    return true;
  } catch (error) {
    console.error('‚ùå Fel vid uppdatering av assistenten:', error.message);
    return false;
  }
}

/**
 * K√∂r den automatiska inl√§rningen manuellt
 */
async function runManualLearning() {
  console.log('üîÑ Startar manuell inl√§rningssession...');
  const result = await collectNewInformation();
  console.log('üìä RESULTAT:', result);
  return result;
}

module.exports = {
  collectNewInformation,
  updateAssistant,
  runManualLearning
};
